Microsoft Windows [Version 10.0.15063]
(c) 2017 Microsoft Corporation. All rights reserved.

C:\Users\HP>mongo
MongoDB shell version v3.4.10
connecting to: mongodb://127.0.0.1:27017
MongoDB server version: 3.4.10
Server has startup warnings:
2018-01-31T14:30:19.203-0700 I CONTROL  [initandlisten]
2018-01-31T14:30:19.203-0700 I CONTROL  [initandlisten] ** WARNING: Access control is not enabled for the database.
2018-01-31T14:30:19.203-0700 I CONTROL  [initandlisten] **          Read and write access to data and configuration is unrestricted.
2018-01-31T14:30:19.204-0700 I CONTROL  [initandlisten]
> use foo
switched to db foo
> db.restP.insertOne({"a":1,"b":2})
{
        "acknowledged" : true,
        "insertedId" : ObjectId("5a723c1314cbcacd85c8fd0d")
}
> db.restP.insertOne({"a":1,"b":[2,3,4]})
{
        "acknowledged" : true,
        "insertedId" : ObjectId("5a723c2214cbcacd85c8fd0e")
}
> db.restp.find()
> db.restp.find();
> db.restp.findOne()
null
> db.restp.count()
0
> db.restp.find
function (query, fields, limit, skip, batchSize, options) {
    var cursor = new DBQuery(this._mongo,
                             this._db,
                             this,
                             this._fullName,
                             this._massageObject(query),
                             fields,
                             limit,
                             skip,
                             batchSize,
                             options || this.getQueryOptions());

    var connObj = this.getMongo();
    var readPrefMode = connObj.getReadPrefMode();
    if (readPrefMode != null) {
        cursor.readPref(readPrefMode, connObj.getReadPrefTagSet());
    }

    var rc = connObj.getReadConcern();
    if (rc) {
        cursor.readConcern(rc);
    }

    return cursor;
}
> db.restp.find()
> db.foo.find()
> db.restP.find()
{ "_id" : ObjectId("5a723c1314cbcacd85c8fd0d"), "a" : 1, "b" : 2 }
{ "_id" : ObjectId("5a723c2214cbcacd85c8fd0e"), "a" : 1, "b" : [ 2, 3, 4 ] }
> db.restP.createIndex({a:1,b:1})
{
        "createdCollectionAutomatically" : false,
        "numIndexesBefore" : 1,
        "numIndexesAfter" : 2,
        "ok" : 1
}
> db.restP.find({"a":1,"b":1})
> db.restP.find({"a":1,"b":2})
{ "_id" : ObjectId("5a723c1314cbcacd85c8fd0d"), "a" : 1, "b" : 2 }
{ "_id" : ObjectId("5a723c2214cbcacd85c8fd0e"), "a" : 1, "b" : [ 2, 3, 4 ] }
> db.restP.explain().find({"a":1,"b":2})
{
        "queryPlanner" : {
                "plannerVersion" : 1,
                "namespace" : "foo.restP",
                "indexFilterSet" : false,
                "parsedQuery" : {
                        "$and" : [
                                {
                                        "a" : {
                                                "$eq" : 1
                                        }
                                },
                                {
                                        "b" : {
                                                "$eq" : 2
                                        }
                                }
                        ]
                },
                "winningPlan" : {
                        "stage" : "FETCH",
                        "inputStage" : {
                                "stage" : "IXSCAN",
                                "keyPattern" : {
                                        "a" : 1,
                                        "b" : 1
                                },
                                "indexName" : "a_1_b_1",
                                "isMultiKey" : true,
                                "multiKeyPaths" : {
                                        "a" : [ ],
                                        "b" : [
                                                "b"
                                        ]
                                },
                                "isUnique" : false,
                                "isSparse" : false,
                                "isPartial" : false,
                                "indexVersion" : 1,
                                "direction" : "forward",
                                "indexBounds" : {
                                        "a" : [
                                                "[1.0, 1.0]"
                                        ],
                                        "b" : [
                                                "[2.0, 2.0]"
                                        ]
                                }
                        }
                },
                "rejectedPlans" : [ ]
        },
        "serverInfo" : {
                "host" : "DESKTOP-88GJBMO",
                "port" : 27017,
                "version" : "3.4.10",
                "gitVersion" : "078f28920cb24de0dd479b5ea6c66c644f6326e9"
        },
        "ok" : 1
}
> db.restP.insert({"a":5,"b":6})
WriteResult({ "nInserted" : 1 })
> db.restP.explain().find({"a":5,"b":6})
{
        "queryPlanner" : {
                "plannerVersion" : 1,
                "namespace" : "foo.restP",
                "indexFilterSet" : false,
                "parsedQuery" : {
                        "$and" : [
                                {
                                        "a" : {
                                                "$eq" : 5
                                        }
                                },
                                {
                                        "b" : {
                                                "$eq" : 6
                                        }
                                }
                        ]
                },
                "winningPlan" : {
                        "stage" : "FETCH",
                        "inputStage" : {
                                "stage" : "IXSCAN",
                                "keyPattern" : {
                                        "a" : 1,
                                        "b" : 1
                                },
                                "indexName" : "a_1_b_1",
                                "isMultiKey" : true,
                                "multiKeyPaths" : {
                                        "a" : [ ],
                                        "b" : [
                                                "b"
                                        ]
                                },
                                "isUnique" : false,
                                "isSparse" : false,
                                "isPartial" : false,
                                "indexVersion" : 1,
                                "direction" : "forward",
                                "indexBounds" : {
                                        "a" : [
                                                "[5.0, 5.0]"
                                        ],
                                        "b" : [
                                                "[6.0, 6.0]"
                                        ]
                                }
                        }
                },
                "rejectedPlans" : [ ]
        },
        "serverInfo" : {
                "host" : "DESKTOP-88GJBMO",
                "port" : 27017,
                "version" : "3.4.10",
                "gitVersion" : "078f28920cb24de0dd479b5ea6c66c644f6326e9"
        },
        "ok" : 1
}
> db.restP.find({"a":5,"b":6})
{ "_id" : ObjectId("5a723e4d14cbcacd85c8fd0f"), "a" : 5, "b" : 6 }
> db.restP.find()
{ "_id" : ObjectId("5a723c1314cbcacd85c8fd0d"), "a" : 1, "b" : 2 }
{ "_id" : ObjectId("5a723c2214cbcacd85c8fd0e"), "a" : 1, "b" : [ 2, 3, 4 ] }
{ "_id" : ObjectId("5a723e4d14cbcacd85c8fd0f"), "a" : 5, "b" : 6 }
> db.restP.insert({"a":[11,15,20],"b":[25,5,9]})
WriteResult({
        "nInserted" : 0,
        "writeError" : {
                "code" : 171,
                "errmsg" : "cannot index parallel arrays [b] [a]"
        }
})
> db.restP.getIndex()
2018-02-01T01:17:14.994+0300 E QUERY    [thread1] TypeError: db.restP.getIndex is not a function :
@(shell):1:1
> db.restP.getIndexes()
[
        {
                "v" : 1,
                "key" : {
                        "_id" : 1
                },
                "name" : "_id_",
                "ns" : "foo.restP"
        },
        {
                "v" : 1,
                "key" : {
                        "a" : 1,
                        "b" : 1
                },
                "name" : "a_1_b_1",
                "ns" : "foo.restP"
        }
]
> db.restP.insertIndex({"a":[100,200,300],"b":[5,9,20]})
2018-02-01T01:19:01.255+0300 E QUERY    [thread1] TypeError: db.restP.insertIndex is not a function :
@(shell):1:1
> db.restP.insert({"a":[100,200,300],"b":[5,9,20]})
WriteResult({
        "nInserted" : 0,
        "writeError" : {
                "code" : 171,
                "errmsg" : "cannot index parallel arrays [b] [a]"
        }
})
> db.restP.insert({"a":[100,200,300],"b":15})
WriteResult({ "nInserted" : 1 })
> db.restP.find()
{ "_id" : ObjectId("5a723c1314cbcacd85c8fd0d"), "a" : 1, "b" : 2 }
{ "_id" : ObjectId("5a723c2214cbcacd85c8fd0e"), "a" : 1, "b" : [ 2, 3, 4 ] }
{ "_id" : ObjectId("5a723e4d14cbcacd85c8fd0f"), "a" : 5, "b" : 6 }
{ "_id" : ObjectId("5a7240f714cbcacd85c8fd12"), "a" : [ 100, 200, 300 ], "b" : 15 }
> db.restP.find({"a":200,"b":3})
> db.restP.find({"a":200,"b":15})
{ "_id" : ObjectId("5a7240f714cbcacd85c8fd12"), "a" : [ 100, 200, 300 ], "b" : 15 }
> db.restP.explain().find({"a":200,"b":15})
{
        "queryPlanner" : {
                "plannerVersion" : 1,
                "namespace" : "foo.restP",
                "indexFilterSet" : false,
                "parsedQuery" : {
                        "$and" : [
                                {
                                        "a" : {
                                                "$eq" : 200
                                        }
                                },
                                {
                                        "b" : {
                                                "$eq" : 15
                                        }
                                }
                        ]
                },
                "winningPlan" : {
                        "stage" : "FETCH",
                        "inputStage" : {
                                "stage" : "IXSCAN",
                                "keyPattern" : {
                                        "a" : 1,
                                        "b" : 1
                                },
                                "indexName" : "a_1_b_1",
                                "isMultiKey" : true,
                                "multiKeyPaths" : {
                                        "a" : [
                                                "a"
                                        ],
                                        "b" : [
                                                "b"
                                        ]
                                },
                                "isUnique" : false,
                                "isSparse" : false,
                                "isPartial" : false,
                                "indexVersion" : 1,
                                "direction" : "forward",
                                "indexBounds" : {
                                        "a" : [
                                                "[200.0, 200.0]"
                                        ],
                                        "b" : [
                                                "[15.0, 15.0]"
                                        ]
                                }
                        }
                },
                "rejectedPlans" : [ ]
        },
        "serverInfo" : {
                "host" : "DESKTOP-88GJBMO",
                "port" : 27017,
                "version" : "3.4.10",
                "gitVersion" : "078f28920cb24de0dd479b5ea6c66c644f6326e9"
        },
        "ok" : 1
}