C:\Program Files\MongoDB\Server\3.4\bin\mongo.exe
MongoDB shell version v3.4.10
connecting to: mongodb://localhost:27017/super2
MongoDB server version: 3.4.10
> use testunique
switched to db testunique
> db.rest.insert({"thing":"apple"})
WriteResult({ "nInserted" : 1 })
> db.rest.insert({"thing":"Banana"})
WriteResult({ "nInserted" : 1 })
> db.rest.insert({"thing":"apple"})
WriteResult({ "nInserted" : 1 })
> db.rest.insert({"thing":"Grapes"})
WriteResult({ "nInserted" : 1 })
> db.rest.find()
{ "_id" : ObjectId("5a72d06f12dc385bcafce569"), "thing" : "apple" }
{ "_id" : ObjectId("5a72d07812dc385bcafce56a"), "thing" : "Banana" }
{ "_id" : ObjectId("5a72d07d12dc385bcafce56b"), "thing" : "apple" }
{ "_id" : ObjectId("5a72d08512dc385bcafce56c"), "thing" : "Grapes" }
> db.rest.createIndex({"thing":1})
{
	"createdCollectionAutomatically" : false,
	"numIndexesBefore" : 1,
	"numIndexesAfter" : 2,
	"ok" : 1
}
> db.rest.createIndexes({"thing":1})
{
	"ok" : 0,
	"errmsg" : "The field 'key' must be an object, but got undefined",
	"code" : 14,
	"codeName" : "TypeMismatch"
}
> db.rest.explain().find()
{
	"queryPlanner" : {
		"plannerVersion" : 1,
		"namespace" : "testunique.rest",
		"indexFilterSet" : false,
		"parsedQuery" : {
			
		},
		"winningPlan" : {
			"stage" : "COLLSCAN",
			"direction" : "forward"
		},
		"rejectedPlans" : [ ]
	},
	"serverInfo" : {
		"host" : "DESKTOP-88GJBMO",
		"port" : 27017,
		"version" : "3.4.10",
		"gitVersion" : "078f28920cb24de0dd479b5ea6c66c644f6326e9"
	},
	"ok" : 1
}
> db.rest.explain().find({"thing":"apple"})
{
	"queryPlanner" : {
		"plannerVersion" : 1,
		"namespace" : "testunique.rest",
		"indexFilterSet" : false,
		"parsedQuery" : {
			"thing" : {
				"$eq" : "apple"
			}
		},
		"winningPlan" : {
			"stage" : "FETCH",
			"inputStage" : {
				"stage" : "IXSCAN",
				"keyPattern" : {
					"thing" : 1
				},
				"indexName" : "thing_1",
				"isMultiKey" : false,
				"multiKeyPaths" : {
					"thing" : [ ]
				},
				"isUnique" : false,
				"isSparse" : false,
				"isPartial" : false,
				"indexVersion" : 1,
				"direction" : "forward",
				"indexBounds" : {
					"thing" : [
						"[\"apple\", \"apple\"]"
					]
				}
			}
		},
		"rejectedPlans" : [ ]
	},
	"serverInfo" : {
		"host" : "DESKTOP-88GJBMO",
		"port" : 27017,
		"version" : "3.4.10",
		"gitVersion" : "078f28920cb24de0dd479b5ea6c66c644f6326e9"
	},
	"ok" : 1
}
> db.rest.dropIndex({"thing":1})
{ "nIndexesWas" : 2, "ok" : 1 }
> db.rest.explain().find({"thing":"apple"})
{
	"queryPlanner" : {
		"plannerVersion" : 1,
		"namespace" : "testunique.rest",
		"indexFilterSet" : false,
		"parsedQuery" : {
			"thing" : {
				"$eq" : "apple"
			}
		},
		"winningPlan" : {
			"stage" : "COLLSCAN",
			"filter" : {
				"thing" : {
					"$eq" : "apple"
				}
			},
			"direction" : "forward"
		},
		"rejectedPlans" : [ ]
	},
	"serverInfo" : {
		"host" : "DESKTOP-88GJBMO",
		"port" : 27017,
		"version" : "3.4.10",
		"gitVersion" : "078f28920cb24de0dd479b5ea6c66c644f6326e9"
	},
	"ok" : 1
}
> db.rest.createIndex({"thing":1},{unique:true})
{
	"ok" : 0,
	"errmsg" : "E11000 duplicate key error collection: testunique.rest index: thing_1 dup key: { : \"apple\" }",
	"code" : 11000,
	"codeName" : "DuplicateKey"
}
> db.rest.find()
{ "_id" : ObjectId("5a72d06f12dc385bcafce569"), "thing" : "apple" }
{ "_id" : ObjectId("5a72d07812dc385bcafce56a"), "thing" : "Banana" }
{ "_id" : ObjectId("5a72d07d12dc385bcafce56b"), "thing" : "apple" }
{ "_id" : ObjectId("5a72d08512dc385bcafce56c"), "thing" : "Grapes" }
> db.rest.remove({"thing":"apple"},{justOne:true})
WriteResult({ "nRemoved" : 1 })
> db.rest.find()
{ "_id" : ObjectId("5a72d07812dc385bcafce56a"), "thing" : "Banana" }
{ "_id" : ObjectId("5a72d07d12dc385bcafce56b"), "thing" : "apple" }
{ "_id" : ObjectId("5a72d08512dc385bcafce56c"), "thing" : "Grapes" }
> db.rest.createIndex({"thing":1},{unique:true})
{
	"createdCollectionAutomatically" : false,
	"numIndexesBefore" : 1,
	"numIndexesAfter" : 2,
	"ok" : 1
}
> db.rest.getIndex()
2018-02-01T11:40:51.844+0300 E QUERY    [thread1] TypeError: db.rest.getIndex is not a function :
@(shell):1:1
> db.rest.getIndexes()
[
	{
		"v" : 1,
		"key" : {
			"_id" : 1
		},
		"name" : "_id_",
		"ns" : "testunique.rest"
	},
	{
		"v" : 1,
		"unique" : true,
		"key" : {
			"thing" : 1
		},
		"name" : "thing_1",
		"ns" : "testunique.rest"
	}
]
> db.rest.insert({"thing":"apple"})
WriteResult({
	"nInserted" : 0,
	"writeError" : {
		"code" : 11000,
		"errmsg" : "E11000 duplicate key error collection: testunique.rest index: thing_1 dup key: { : \"apple\" }"
	}
})
> db.rest.insert({"thing":"guava"})
WriteResult({ "nInserted" : 1 })
> db.rest.find()
{ "_id" : ObjectId("5a72d07812dc385bcafce56a"), "thing" : "Banana" }
{ "_id" : ObjectId("5a72d07d12dc385bcafce56b"), "thing" : "apple" }
{ "_id" : ObjectId("5a72d08512dc385bcafce56c"), "thing" : "Grapes" }
{ "_id" : ObjectId("5a72d2da12dc385bcafce56e"), "thing" : "guava" }
